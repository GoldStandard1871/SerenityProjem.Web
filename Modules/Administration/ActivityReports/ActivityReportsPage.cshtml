@{
    ViewData["Title"] = "Activity Reports";
}

@section Head
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
}

<div id="ActivityReportsDiv" class="s-ActivityReportsPage">
    <div class="page-content">
        <div class="section-header">
            <h1><i class="fa fa-chart-line"></i> Activity Reports</h1>
            <p class="text-muted">Comprehensive user activity analysis and reporting</p>
        </div>

        <!-- Report Type Selector -->
        <div class="row mb-3">
            <div class="col-lg-12">
                <div class="widget-box transparent">
                    <div class="widget-header">
                        <h4 class="widget-title">
                            <i class="fa fa-filter"></i> Report Settings
                        </h4>
                    </div>
                    <div class="widget-body">
                        <div class="widget-main">
                            <div class="row">
                                <div class="col-md-4">
                                    <label>Report Type:</label>
                                    <select id="reportType" class="form-control">
                                        <option value="overview" selected>Overview</option>
                                        <option value="daily">Daily Report</option>
                                        <option value="weekly">Weekly Report</option>
                                        <option value="monthly">Monthly Report</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label>Date/Period:</label>
                                    <input type="date" id="reportDate" class="form-control" />
                                </div>
                                <div class="col-md-4">
                                    <label>&nbsp;</label><br>
                                    <button id="generateReport" class="btn btn-primary">
                                        <i class="fa fa-chart-bar"></i> Generate Report
                                    </button>
                                    <button id="exportReport" class="btn btn-success">
                                        <i class="fa fa-download"></i> Export
                                    </button>
                                    <button id="refreshReport" class="btn btn-info">
                                        <i class="fa fa-refresh"></i> Refresh
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loading Indicator -->
        <div id="loadingIndicator" class="text-center" style="display: none;">
            <i class="fa fa-spinner fa-spin fa-3x text-primary"></i>
            <p class="text-muted">Generating report...</p>
        </div>

        <!-- Report Summary Cards -->
        <div id="summaryCards" class="row mb-3" style="display: none;">
            <div class="col-lg-3 col-md-6">
                <div class="stat-card bg-primary">
                    <div class="stat-icon">
                        <i class="fa fa-users"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="uniqueUsers">0</div>
                        <div class="stat-text">Unique Users</div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card bg-success">
                    <div class="stat-icon">
                        <i class="fa fa-activity"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="totalActivities">0</div>
                        <div class="stat-text">Total Activities</div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card bg-info">
                    <div class="stat-icon">
                        <i class="fa fa-sign-in-alt"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="totalLogins">0</div>
                        <div class="stat-text">Total Logins</div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card bg-warning">
                    <div class="stat-icon">
                        <i class="fa fa-eye"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="totalPageViews">0</div>
                        <div class="stat-text">Page Views</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row 1 -->
        <div id="chartsContainer" style="display: none;">
            <div class="row mb-3">
                <div class="col-lg-6">
                    <div class="widget-box transparent">
                        <div class="widget-header">
                            <h4 class="widget-title">
                                <i class="fa fa-pie-chart"></i> Activity Types
                            </h4>
                        </div>
                        <div class="widget-body">
                            <div class="widget-main">
                                <canvas id="activityTypeChart" style="height: 300px;"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="widget-box transparent">
                        <div class="widget-header">
                            <h4 class="widget-title">
                                <i class="fa fa-clock"></i> Hourly Activity
                            </h4>
                        </div>
                        <div class="widget-body">
                            <div class="widget-main">
                                <canvas id="hourlyActivityChart" style="height: 250px;"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="widget-box transparent">
                        <div class="widget-header">
                            <h4 class="widget-title">
                                <i class="fa fa-users"></i> Top Active Users
                            </h4>
                        </div>
                        <div class="widget-body">
                            <div class="widget-main">
                                <canvas id="topUsersChart" style="height: 250px;"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Data Tables -->
            <div class="row">
                <div class="col-lg-6">
                    <div class="widget-box transparent">
                        <div class="widget-header">
                            <h4 class="widget-title">
                                <i class="fa fa-list"></i> Top Pages
                            </h4>
                        </div>
                        <div class="widget-body">
                            <div class="widget-main">
                                <div class="table-responsive">
                                    <table id="topPagesTable" class="table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th>Page</th>
                                                <th>Views</th>
                                                <th>Unique Viewers</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="widget-box transparent">
                        <div class="widget-header">
                            <h4 class="widget-title">
                                <i class="fa fa-user-friends"></i> User Activity Details
                            </h4>
                        </div>
                        <div class="widget-body">
                            <div class="widget-main">
                                <div class="table-responsive">
                                    <table id="userActivityTable" class="table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th>User</th>
                                                <th>Activities</th>
                                                <th>First Activity</th>
                                                <th>Last Activity</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Overview Section -->
            <div id="overviewSection" class="row" style="display: none;">
                <!-- System Health Status -->
                <div class="col-lg-12 mb-3">
                    <div class="widget-box transparent">
                        <div class="widget-header">
                            <h4 class="widget-title">
                                <i class="fa fa-heartbeat"></i> System Health
                            </h4>
                        </div>
                        <div class="widget-body">
                            <div class="widget-main">
                                <div id="systemHealthStatus" class="alert alert-info">
                                    <!-- Health status will be populated here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Recent Activities Timeline -->
                <div class="col-lg-12">
                    <div class="widget-box transparent">
                        <div class="widget-header">
                            <h4 class="widget-title">
                                <i class="fa fa-history"></i> Recent User Activities
                            </h4>
                        </div>
                        <div class="widget-body">
                            <div class="widget-main">
                                <div id="activityTimeline" class="activity-timeline">
                                    <!-- Timeline will be populated here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
$(document).ready(function() {
    // Initialize date picker with today's date
    $('#reportDate').val(new Date().toISOString().split('T')[0]);
    
    // Event handlers
    $('#generateReport').click(generateReport);
    $('#refreshReport').click(generateReport);
    $('#exportReport').click(exportReport);
    $('#reportType').change(function() {
        updateDatePickerForType();
    });
    
    // Generate initial report
    generateReport();
});

let currentReportData = null;
let chartInstances = {};

function updateDatePickerForType() {
    const reportType = $('#reportType').val();
    const dateInput = $('#reportDate');
    
    if (reportType === 'monthly') {
        dateInput.attr('type', 'month');
    } else {
        dateInput.attr('type', 'date');
    }
}

function generateReport() {
    const reportType = $('#reportType').val();
    const reportDate = $('#reportDate').val();
    
    showLoading(true);
    hideReportContent();
    
    let apiUrl = '';
    let params = {};
    
    switch (reportType) {
        case 'overview':
            apiUrl = '/api/activity-reports/overview';
            break;
        case 'daily':
            apiUrl = '/api/activity-reports/daily';
            if (reportDate) params.date = reportDate;
            break;
        case 'weekly':
            apiUrl = '/api/activity-reports/weekly';
            if (reportDate) params.startDate = reportDate;
            break;
        case 'monthly':
            apiUrl = '/api/activity-reports/monthly';
            if (reportDate) {
                const [year, month] = reportDate.split('-');
                params.year = parseInt(year);
                params.month = parseInt(month);
            }
            break;
    }
    
    console.log('Generating report:', reportType, 'URL:', apiUrl, 'Params:', params);
    
    $.get(apiUrl, params)
        .done(function(data) {
            console.log('Report data received:', data);
            currentReportData = data;
            displayReport(data, reportType);
            showLoading(false);
            showReportContent();
        })
        .fail(function(xhr, status, error) {
            showLoading(false);
            console.error('Report generation failed:', error);
            alert('Failed to generate report: ' + error);
        });
}

function displayReport(data, reportType) {
    // Update summary cards
    updateSummaryCards(data.Summary || data);
    
    // Create charts based on report type
    switch (reportType) {
        case 'overview':
            createOverviewDisplay(data);
            break;
        case 'daily':
            createDailyCharts(data);
            break;
        case 'weekly':
            createWeeklyCharts(data);
            break;
        case 'monthly':
            createMonthlyCharts(data);
            break;
    }
    
    // Update data tables
    updateDataTables(data);
}

function updateSummaryCards(summary) {
    $('#uniqueUsers').text(summary.UniqueUsers || 0);
    $('#totalActivities').text(summary.TotalActivities || 0);
    // Check for both field names (daily reports use 'Logins', overview uses 'TotalLogins')
    $('#totalLogins').text(summary.Logins || summary.TotalLogins || 0);
    $('#totalPageViews').text(summary.PageViews || summary.TotalPageViews || 0);
}

function createDailyCharts(data) {
    console.log('Daily Report Data:', data);
    console.log('HourlyActivity:', data.HourlyActivity);
    
    // Hourly Activity Chart
    if (data.HourlyActivity && data.HourlyActivity.length > 0) {
        const hourlyLabels = data.HourlyActivity.map(h => h.Hour + ':00');
        const hourlyData = data.HourlyActivity.map(h => h.ActivityCount);
        
        console.log('Hourly Labels:', hourlyLabels);
        console.log('Hourly Data:', hourlyData);
        
        createChart('hourlyActivityChart', {
            type: 'bar',
            data: {
                labels: hourlyLabels,
                datasets: [{
                    label: 'Activities',
                    data: hourlyData,
                    backgroundColor: 'rgba(75, 192, 192, 0.8)',
                    borderColor: 'rgb(75, 192, 192)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Hourly Activity Distribution'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    } else {
        console.log('No hourly activity data available');
        // Show empty state
        const canvas = document.getElementById('hourlyActivityChart');
        if (canvas) {
            const ctx = canvas.getContext('2d');
            ctx.font = '16px Arial';
            ctx.textAlign = 'center';
            ctx.fillStyle = '#999';
            ctx.fillText('No hourly activity data available', canvas.width / 2, canvas.height / 2);
        }
    }
    
    // Activity Types Pie Chart
    if (data.ActivityTypes && data.ActivityTypes.length > 0) {
        const typeLabels = data.ActivityTypes.map(t => t.ActivityType);
        const typeData = data.ActivityTypes.map(t => t.Count);
        
        createChart('activityTypeChart', {
            type: 'pie',
            data: {
                labels: typeLabels,
                datasets: [{
                    data: typeData,
                    backgroundColor: [
                        '#FF6384',
                        '#36A2EB',
                        '#FFCE56',
                        '#4BC0C0',
                        '#9966FF',
                        '#FF9F40'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right'
                    }
                }
            }
        });
    }
    
    // Top Users Chart
    if (data.TopUsers && data.TopUsers.length > 0) {
        const userLabels = data.TopUsers.map(u => u.Username);
        const userData = data.TopUsers.map(u => u.ActivityCount);
        
        createChart('topUsersChart', {
            type: 'bar',
            data: {
                labels: userLabels,
                datasets: [{
                    label: 'Activities',
                    data: userData,
                    backgroundColor: 'rgba(54, 162, 235, 0.8)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Most Active Users'
                    }
                }
            }
        });
    }
}

function createWeeklyCharts(data) {
    // Daily Trends Chart
    if (data.DailyTrends && data.DailyTrends.length > 0) {
        const trendLabels = data.DailyTrends.map(d => new Date(d.Date).toLocaleDateString());
        const activityData = data.DailyTrends.map(d => d.ActivityCount);
        const userStrends = data.DailyTrends.map(d => d.UniqueUsers);
        
        // Weekly trends moved to hourly activity chart area
        createChart('hourlyActivityChart', {
            type: 'line',
            data: {
                labels: trendLabels,
                datasets: [{
                    label: 'Total Activities',
                    data: activityData,
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Daily Activity Trends'
                    }
                }
            }
        });
    }
    
    // Peak Hours Chart
    if (data.PeakHours && data.PeakHours.length > 0) {
        const peakLabels = data.PeakHours.map(h => h.Hour + ':00');
        const peakData = data.PeakHours.map(h => h.ActivityCount);
        
        createChart('hourlyActivityChart', {
            type: 'bar',
            data: {
                labels: peakLabels,
                datasets: [{
                    label: 'Activities',
                    data: peakData,
                    backgroundColor: 'rgba(255, 206, 86, 0.8)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Peak Hours This Week'
                    }
                }
            }
        });
    }
}

function createMonthlyCharts(data) {
    // Weekly Breakdown Chart
    if (data.WeeklyBreakdown && data.WeeklyBreakdown.length > 0) {
        const weekLabels = data.WeeklyBreakdown.map(w => 'Week ' + w.WeekNumber);
        const weekData = data.WeeklyBreakdown.map(w => w.ActivityCount);
        
        createChart('activityTrendChart', {
            type: 'bar',
            data: {
                labels: weekLabels,
                datasets: [{
                    label: 'Activities',
                    data: weekData,
                    backgroundColor: 'rgba(153, 102, 255, 0.8)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Weekly Activity Breakdown'
                    }
                }
            }
        });
    }
    
    // User Segmentation Chart
    if (data.UserSegmentation && data.UserSegmentation.length > 0) {
        const segmentLabels = data.UserSegmentation.map(s => s.Segment);
        const segmentData = data.UserSegmentation.map(s => s.UserCount);
        
        createChart('activityTypeChart', {
            type: 'doughnut',
            data: {
                labels: segmentLabels,
                datasets: [{
                    data: segmentData,
                    backgroundColor: [
                        '#FF6384',
                        '#36A2EB', 
                        '#FFCE56',
                        '#4BC0C0'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'User Activity Segmentation'
                    }
                }
            }
        });
    }
}

function createChart(canvasId, config) {
    // Destroy existing chart if it exists
    if (chartInstances[canvasId]) {
        chartInstances[canvasId].destroy();
    }
    
    const ctx = document.getElementById(canvasId).getContext('2d');
    chartInstances[canvasId] = new Chart(ctx, config);
}

function updateDataTables(data) {
    // Update Top Pages table
    const pageTableBody = $('#topPagesTable tbody');
    pageTableBody.empty();
    
    if (data.PageViews && data.PageViews.length > 0) {
        data.PageViews.forEach(page => {
            pageTableBody.append(`
                <tr>
                    <td>${page.ActivityDetail || page.Details || 'Dashboard'}</td>
                    <td class="views-count">${page.ViewCount}</td>
                    <td class="unique-viewers-count">${page.UniqueViewers}</td>
                </tr>
            `);
        });
    } else {
        // Show sample data if no real data
        pageTableBody.append(`
            <tr><td colspan="3" class="text-center text-muted">No page view data available</td></tr>
        `);
    }
    
    // Update User Activity table
    const userTableBody = $('#userActivityTable tbody');
    userTableBody.empty();
    
    if (data.TopUsers && data.TopUsers.length > 0) {
        data.TopUsers.forEach(user => {
            const firstActivity = user.FirstActivity ? new Date(user.FirstActivity).toLocaleString() : 'N/A';
            const lastActivity = user.LastActivity ? new Date(user.LastActivity).toLocaleString() : 'N/A';
            
            userTableBody.append(`
                <tr>
                    <td><strong>${user.Username}</strong></td>
                    <td><span class="badge badge-primary">${user.ActivityCount}</span></td>
                    <td><small>${firstActivity}</small></td>
                    <td><small>${lastActivity}</small></td>
                </tr>
            `);
        });
    } else if (data.UserActivitySummary && data.UserActivitySummary.length > 0) {
        // Use UserActivitySummary for Overview
        data.UserActivitySummary.slice(0, 10).forEach(user => {
            const firstActivity = user.FirstActivity ? new Date(user.FirstActivity).toLocaleString() : 'N/A';
            const lastActivity = user.LastActivity ? new Date(user.LastActivity).toLocaleString() : 'N/A';
            
            userTableBody.append(`
                <tr>
                    <td><strong>${user.Username}</strong></td>
                    <td><span class="badge badge-primary">${user.TotalActivities}</span></td>
                    <td><small>${firstActivity}</small></td>
                    <td><small>${lastActivity}</small></td>
                </tr>
            `);
        });
    } else {
        userTableBody.append(`
            <tr><td colspan="4" class="text-center text-muted">No user activity data available</td></tr>
        `);
    }
}

function showLoading(show) {
    if (show) {
        $('#loadingIndicator').show();
    } else {
        $('#loadingIndicator').hide();
    }
}

function showReportContent() {
    $('#summaryCards').show();
    $('#chartsContainer').show();
    if ($('#reportType').val() === 'overview') {
        $('#overviewSection').show();
    }
}

function hideReportContent() {
    $('#summaryCards').hide();
    $('#chartsContainer').hide();
    $('#overviewSection').hide();
}

function createOverviewDisplay(data) {
    // Show charts container for overview too
    $('#chartsContainer').show();
    $('#overviewSection').show();
    
    // Update system health status
    if (data.SystemHealth) {
        const health = data.SystemHealth;
        const statusClass = health.Status === 'Active' ? 'alert-success' : 
                           health.Status === 'Normal' ? 'alert-info' : 
                           health.Status === 'Slow' ? 'alert-warning' : 'alert-danger';
        
        $('#systemHealthStatus')
            .removeClass('alert-info alert-success alert-warning alert-danger')
            .addClass(statusClass)
            .html(`
                <div class="row">
                    <div class="col-md-3">
                        <strong>System Status:</strong> ${health.Status}
                    </div>
                    <div class="col-md-3">
                        <strong>Active Users (Last Hour):</strong> ${health.ActiveUsersLastHour}
                    </div>
                    <div class="col-md-3">
                        <strong>Activities (Last 5 Min):</strong> ${health.ActivitiesLast5Min}
                    </div>
                    <div class="col-md-3">
                        <strong>Last Activity:</strong> ${health.TimeSinceLastActivity}
                    </div>
                </div>
            `);
    }
    
    // Create activity timeline
    console.log('Recent Activities:', data.RecentActivities);
    if (data.RecentActivities && data.RecentActivities.length > 0) {
        const timeline = $('#activityTimeline');
        timeline.empty();
        
        let currentDate = '';
        data.RecentActivities.forEach(activity => {
            console.log('Processing activity:', activity);
            const activityDate = new Date(activity.ActivityTime).toLocaleDateString();
            const activityTime = new Date(activity.ActivityTime).toLocaleTimeString();
            
            // Add date header if new date
            if (activityDate !== currentDate) {
                currentDate = activityDate;
                timeline.append(`
                    <div class="timeline-date">
                        <i class="fa fa-calendar"></i> ${activityDate}
                    </div>
                `);
            }
            
            // Get activity icon and color
            const { icon, color } = getActivityIcon(activity.ActivityType);
            
            // Add activity item
            timeline.append(`
                <div class="timeline-item">
                    <div class="timeline-icon" style="background-color: ${color};">
                        <i class="fa ${icon}"></i>
                    </div>
                    <div class="timeline-content">
                        <div class="timeline-header">
                            <strong>${activity.Username}</strong>
                            <span class="timeline-time">${activityTime}</span>
                        </div>
                        <div class="timeline-body">
                            ${activity.ActivityType}
                            ${activity.Details ? `: ${activity.Details}` : ''}
                            ${activity.Location ? `<br><small class="text-muted"><i class="fa fa-map-marker"></i> ${activity.Location}</small>` : ''}
                        </div>
                    </div>
                </div>
            `);
        });
    }
    
    // Create activity distribution chart
    if (data.ActivityDistribution && data.ActivityDistribution.length > 0) {
        const labels = data.ActivityDistribution.map(d => d.ActivityType);
        const counts = data.ActivityDistribution.map(d => d.Count);
        
        createChart('activityTypeChart', {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: counts,
                    backgroundColor: [
                        '#28a745', // Login - green
                        '#dc3545', // Logout - red
                        '#17a2b8', // PageView - info
                        '#ffc107', // Action - warning
                        '#6f42c1', // Other - purple
                        '#e83e8c'  // Additional - pink
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Activity Type Distribution'
                    },
                    legend: {
                        position: 'right'
                    }
                }
            }
        });
    }
    
    // Create user activity heatmap
    if (data.UserActivitySummary && data.UserActivitySummary.length > 0) {
        const userLabels = data.UserActivitySummary.slice(0, 10).map(u => u.Username);
        const userData = data.UserActivitySummary.slice(0, 10).map(u => u.TotalActivities);
        
        createChart('topUsersChart', {
            type: 'bar',
            data: {
                labels: userLabels,
                datasets: [{
                    label: 'Total Activities',
                    data: userData,
                    backgroundColor: 'rgba(54, 162, 235, 0.8)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                indexAxis: 'y', // This makes it horizontal
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Top 10 Most Active Users'
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
    
    // Create hourly activity chart for overview
    if (data.HourlyDistribution && data.HourlyDistribution.length > 0) {
        const hourLabels = [];
        const hourData = [];
        
        // Create 24 hour labels and data
        for (let i = 0; i < 24; i++) {
            hourLabels.push(i + ':00');
            const hourActivity = data.HourlyDistribution.find(h => h.Hour === i);
            hourData.push(hourActivity ? hourActivity.ActivityCount : 0);
        }
        
        createChart('hourlyActivityChart', {
            type: 'bar',
            data: {
                labels: hourLabels,
                datasets: [{
                    label: 'Activities',
                    data: hourData,
                    backgroundColor: 'rgba(255, 206, 86, 0.8)',
                    borderColor: 'rgba(255, 206, 86, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Activity Distribution by Hour (Last 7 Days)'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
}

function getActivityIcon(activityType) {
    const iconMap = {
        'Login': { icon: 'fa-sign-in-alt', color: '#28a745' },
        'Logout': { icon: 'fa-sign-out-alt', color: '#dc3545' },
        'PageView': { icon: 'fa-eye', color: '#17a2b8' },
        'Action': { icon: 'fa-bolt', color: '#ffc107' },
        'Create': { icon: 'fa-plus-circle', color: '#28a745' },
        'Update': { icon: 'fa-edit', color: '#ffc107' },
        'Delete': { icon: 'fa-trash', color: '#dc3545' },
        'Export': { icon: 'fa-download', color: '#6f42c1' }
    };
    
    return iconMap[activityType] || { icon: 'fa-circle', color: '#6c757d' };
}

function exportReport() {
    if (!currentReportData) {
        alert('No report data to export. Please generate a report first.');
        return;
    }
    
    const reportType = $('#reportType').val();
    const reportDate = $('#reportDate').val();
    
    // Show export options
    const exportOptions = `
        <div class="modal fade" id="exportModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Export Report</h5>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>Export Format:</label>
                            <select id="exportFormat" class="form-control">
                                <option value="csv">CSV (Excel Compatible)</option>
                                <option value="html">HTML Report</option>
                                <option value="json">JSON Data</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="scheduleReport"> Schedule this report
                            </label>
                        </div>
                        <div id="scheduleOptions" style="display:none;">
                            <div class="form-group">
                                <label>Frequency:</label>
                                <select id="scheduleFrequency" class="form-control">
                                    <option value="daily">Daily</option>
                                    <option value="weekly">Weekly</option>
                                    <option value="monthly">Monthly</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Email Address:</label>
                                <input type="email" id="scheduleEmail" class="form-control" placeholder="admin@company.com">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="performExport()">Export</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remove existing modal and add new one
    $('#exportModal').remove();
    $('body').append(exportOptions);
    
    // Show modal
    $('#exportModal').modal('show');
    
    // Handle schedule checkbox
    $('#scheduleReport').change(function() {
        if ($(this).is(':checked')) {
            $('#scheduleOptions').show();
        } else {
            $('#scheduleOptions').hide();
        }
    });
}

function performExport() {
    const reportType = $('#reportType').val();
    const reportDate = $('#reportDate').val();
    const exportFormat = $('#exportFormat').val();
    const scheduleReport = $('#scheduleReport').is(':checked');
    
    // Debug log
    console.log('Export parameters:', { reportType, reportDate, exportFormat });
    
    // Validate required fields
    if (!reportType) {
        alert('Please select a report type first.');
        return;
    }
    
    if (!reportDate) {
        alert('Please select a date first.');
        return;
    }
    
    if (!currentReportData) {
        alert('No report data available. Please generate a report first.');
        return;
    }
    
    if (scheduleReport) {
        const frequency = $('#scheduleFrequency').val();
        const email = $('#scheduleEmail').val();
        
        if (!email) {
            alert('Please enter an email address for scheduled reports.');
            return;
        }
        
        // Schedule the report
        $.post('/api/activity-reports/schedule', {
            reportType: reportType,
            frequency: frequency,
            email: email
        })
        .done(function(result) {
            if (result.Success) {
                alert(`Report scheduled successfully! Next run: ${new Date(result.ScheduledReport.NextRun).toLocaleString()}`);
                $('#exportModal').modal('hide');
            } else {
                alert('Failed to schedule report: ' + result.Error);
            }
        })
        .fail(function() {
            alert('Failed to schedule report. Please try again.');
        });
    }
    
    // Perform the export
    if (exportFormat === 'json') {
        // JSON export (client-side)
        const exportData = {
            reportType: reportType,
            reportDate: reportDate,
            generatedAt: new Date().toISOString(),
            data: currentReportData
        };
        
        const dataStr = JSON.stringify(exportData, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `activity-report-${reportType}-${reportDate}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        $('#exportModal').modal('hide');
    } else {
        // Server-side export (CSV/HTML)
        const exportUrl = `/api/activity-reports/export/csv?reportType=${encodeURIComponent(reportType)}&reportDate=${encodeURIComponent(reportDate)}&format=${encodeURIComponent(exportFormat)}`;
        
        console.log('Export URL:', exportUrl);
        
        // Create a temporary form to trigger download
        const form = $('<form method="GET" action="' + exportUrl + '"></form>');
        $('body').append(form);
        form.submit();
        form.remove();
        
        $('#exportModal').modal('hide');
    }
}
</script>

<style>
.stat-card {
    padding: 20px;
    border-radius: 8px;
    color: white;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.stat-card.bg-primary {
    background-color: #0d6efd !important;
}

.stat-card.bg-success {
    background-color: #198754 !important;
}

.stat-card.bg-info {
    background-color: #0dcaf0 !important;
}

.stat-card.bg-warning {
    background-color: #ffc107 !important;
    color: #000 !important;
}

.stat-icon {
    font-size: 2.5em;
    margin-right: 15px;
    opacity: 0.9;
}

.stat-content {
    flex: 1;
}

.stat-number {
    font-size: 2em;
    font-weight: bold;
    margin-bottom: 5px;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
}

.stat-text {
    font-size: 0.9em;
    font-weight: 500;
    opacity: 1;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
}

.widget-box {
    background: white;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.widget-header {
    padding: 15px 20px;
    border-bottom: 1px solid #eee;
    background: #f8f9fa;
}

.widget-title {
    margin: 0;
    font-size: 1.1em;
    color: #333;
}

.widget-body {
    padding: 0;
}

.widget-main {
    padding: 20px;
}

.table-responsive {
    max-height: 300px;
    overflow-y: auto;
}

.badge {
    font-size: 0.9em;
    font-weight: 600;
    padding: 0.4em 0.6em;
}

.badge-primary {
    background-color: #0d6efd !important;
    color: white !important;
}

/* Table styles for better readability */
.table td {
    color: #212529 !important;
    font-weight: 500;
}

.table th {
    color: #212529 !important;
    font-weight: 700;
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
}

.table td small {
    color: #495057 !important;
    font-weight: 500;
}

.table tbody tr:hover {
    background-color: #f8f9fa;
}

/* Top Pages table specific styling */
#topPagesTable td.views-count {
    font-weight: 700 !important;
    color: #0d6efd !important;  /* Blue for Views */
    font-size: 1.2em !important;
    text-align: center;
}

#topPagesTable td.unique-viewers-count {
    font-weight: 700 !important;
    color: #198754 !important;  /* Green for Unique Viewers */
    font-size: 1.2em !important;
    text-align: center;
}

#topPagesTable tbody tr td:first-child {
    font-weight: 600 !important;
    color: #212529 !important;
}

/* Override any inherited styles */
.widget-box .table td {
    background-color: white !important;
}

.widget-box.transparent .table td {
    background-color: transparent !important;
}

/* User Activity table specific styling */
#userActivityTable .badge {
    font-size: 1em;
}

/* Activity Timeline Styles */
.activity-timeline {
    position: relative;
    padding-left: 30px;
}

.activity-timeline:before {
    content: '';
    position: absolute;
    left: 15px;
    top: 0;
    bottom: 0;
    width: 2px;
    background: #e9ecef;
}

.timeline-date {
    margin: 20px 0 10px -30px;
    padding: 10px 15px;
    background: #f8f9fa;
    border-radius: 4px;
    font-weight: bold;
    color: #495057;
}

.timeline-item {
    position: relative;
    margin-bottom: 20px;
    padding-left: 20px;
}

.timeline-icon {
    position: absolute;
    left: -23px;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    z-index: 1;
}

.timeline-content {
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 4px;
    padding: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
}

.timeline-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
}

.timeline-time {
    color: #6c757d;
    font-size: 0.9em;
}

.timeline-body {
    color: #495057;
    font-size: 0.95em;
}
</style>